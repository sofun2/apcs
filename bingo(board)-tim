
/**
 * Write a description of class Board here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */

import java.util.*;
import javax.swing.JComponent;
import javax.swing.JFrame;
import java.awt.*;
import java.awt.geom.*;
import java.awt.event.*;

public class Board extends JComponent
{
    private static int dim = 400;
    private static Square[][] player = new Square[5][5];
    private static Square[][] bot = new Square[5][5];
    public static ArrayList<Integer> personlist = new ArrayList<Integer>();
    public static ArrayList<Integer> botlist = new ArrayList<Integer>();
    public static ArrayList<Integer> gamelist = new ArrayList<Integer>();
    public static int nextnumber;
    public static Square generator = new Square(0, 0, 0, 0);
    public static void main(String args[])
    {
        JFrame frame = new JFrame();
        frame.setSize(dim*2, dim*2);
        frame.setTitle("Bingo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        Board bingo = new Board();
     
        //board for player
        for (int i = 50; i < 300; i += 50)
        {
            for (int j = 50; j < 300; j += 50)
            {
                Square temp = new Square(j, i, j+50, i+50);
                temp.norepeats(personlist);
                player[(i/50)-1][(j/50)-1] = temp;
                personlist.add(temp.getNumb());
            }
        }
        
        //board for bot
        for (int i = 50; i < 300; i += 50)
        {
            for (int j = 350; j < 600; j += 50)
            {
                Square temp = new Square(j, i, j+50, i+50);
                temp.norepeats(botlist);
                bot[(i/50)-1][((j-300)/50)-1] = temp;
                botlist.add(temp.getNumb());
            }
        }
        
        for (int i = 0; i < personlist.size(); i++)
        {
            System.out.println(botlist.get(i));
        }
        
        frame.add(bingo);
        
        class MouseClick implements MouseListener {
            public void mousePressed(MouseEvent event) {};
            public void mouseReleased(MouseEvent event) {};
            public void mouseEntered(MouseEvent event) {};
            public void mouseClicked(MouseEvent event) {
                int mx = event.getX();
                int my = event.getY();
                for (int i = 0; i < player.length; i++)
                {
                    for (int j = 0; j < player[0].length; j++)
                    {
                        if(player[i][j].checkIn(mx, my))
                        {
                            player[i][j].change();
                            bingo.update();
                        }
                    }
                }
            }
            public void mouseExited(MouseEvent event) {};
        }
        
        MouseListener mouse = new MouseClick();
        bingo.addMouseListener(mouse);
        frame.setVisible(true);
        
        bingo.next();
    }
    
    public void update() 
    {
        repaint();
    }
    
    public void paintComponent(Graphics g1)
    {
        Graphics2D g = (Graphics2D) g1;
         
        //vert first board
        for (int i = 50; i <= 300; i += 50)
        {
            Line2D.Double line = new Line2D.Double(i, 50, i, 300);
            g.draw(line);
        }
        //hor first board
        for (int i = 50; i <= 300; i += 50)
        {
            Line2D.Double line = new Line2D.Double(50, i, 300, i);
            g.draw(line);
        }
        //vert second board
        for (int i = 350; i <= 600; i += 50)
        {
            Line2D.Double line = new Line2D.Double(i, 50, i, 300);
            g.draw(line);
        }
        //hor second board
        for (int i = 50; i <= 300; i += 50)
        {
            Line2D.Double line = new Line2D.Double(350, i, 600, i);
            g.draw(line);
        }
        
        
        Color shade = new Color(127, 127, 127, 100);
        Color text = new Color(0, 0, 0);
        for (int i = 0; i < player.length; i++)
        {
            for (int j = 0; j < player[0].length; j++)
            {
                g.setColor(text);
                String num = String.valueOf(player[i][j].getNumb());
                g.drawString(num, player[i][j].topLeftX()+18, player[i][j].topLeftY()+29);
                if(player[i][j].check())
                {
                    g.setColor(shade);
                    g.fillRect(player[i][j].topLeftX(), player[i][j].topLeftY(), 50, 50);
                }
            }
        }
        
        for (int i = 0; i < bot.length; i++)
        {
            for (int j = 0; j < bot[0].length; j++)
            {
                g.setColor(text);
                String num = String.valueOf(bot[i][j].getNumb());
                g.drawString(num, bot[i][j].topLeftX()+18, bot[i][j].topLeftY()+29);
                if(bot[i][j].check())
                {
                    g.setColor(shade);
                    g.fillRect(bot[i][j].topLeftX(), bot[i][j].topLeftY(), 50, 50);
                }
            }
        }
        
        g.setColor(text);
        String gametext = "The next number is: " + String.valueOf(nextnumber);
        g.drawString(gametext, 300, 350);
    }
    
    public void next()
    {
        try
        {
            Thread.sleep(100);
            generator.newNum();
            generator.norepeats(gamelist);
            nextnumber = generator.getNumb();
            gamelist.add(nextnumber);
            CheckProgress();
            repaint();
            next();
        }
        catch(InterruptedException e) {}        
    }
    
    public void CheckProgress()
    {
        for (int i = 0; i < bot.length; i++)
        {
            for (int j = 0; j < bot[0].length; j++)
            {
                if(bot[i][j].getNumb() == nextnumber)
                {
                    bot[i][j].change();
                }
            }
        }
        
        for (int i = 0; i < player.length; i++)
        {
            for (int j = 0; j < player[0].length; j++)
            {
                if(player[i][j].getNumb() == nextnumber)
                {
                    player[i][j].autochange();
                }
            }
        }
    }
}
